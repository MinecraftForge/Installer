buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'net.sf.proguard:proguard-gradle:6.2.2'
        classpath 'org.eclipse.jgit:org.eclipse.jgit:5.10.0.202012080955-r'
    }
}

plugins {
    id 'org.cadixdev.licenser' version '0.5.0'
    id 'com.github.johnrengelman.shadow' version '6.1.0'
    id 'maven'
    id 'maven-publish'
    id 'java'
    id 'eclipse'
    id 'idea'
}

repositories {
    mavenCentral()
}

group = 'net.minecraftforge'
archivesBaseName = 'installer'
java.toolchain.languageVersion = JavaLanguageVersion.of(8)

license {
  header project.file('LICENSE-header.txt')
  include 'net/minecraftforge/installer/**/*.java'
  newLine false
}

def gitInfo(dir) {
    String.metaClass.rsplit = { String del, int limit = -1 ->
        def lst = new ArrayList()
        def x = 0, idx
        def tmp = delegate
        while ((idx = tmp.lastIndexOf(del)) != -1 && (limit == -1 || x++ < limit)) {
            lst.add(0, tmp.substring(idx + del.length(), tmp.length()))
            tmp = tmp.substring(0, idx)
        }
        lst.add(0, tmp)
        return lst
    }
    
    def git = null
    try {
        git = org.eclipse.jgit.api.Git.open(dir)
    } catch (org.eclipse.jgit.errors.RepositoryNotFoundException e) {
        return [
            tag: '0.0',
            offset: '0',
            hash: '00000000',
            branch: 'master',
            commit: '0000000000000000000000',
            abbreviatedId: '00000000'
        ]
    }
    def desc = git.describe().setLong(true).setTags(true).call().rsplit('-', 2)
    def head = git.repository.exactRef('HEAD')
    def longBranch = head.symbolic ? head?.target?.name : null // matches Repository.getFullBranch() but returning null when on a detached HEAD

    def ret = [:]
    ret.tag = desc[0]
    ret.offset = desc[1]
    ret.hash = desc[2]
    ret.branch = longBranch != null ? org.eclipse.jgit.lib.Repository.shortenRefName(longBranch) : null
    ret.commit = org.eclipse.jgit.lib.ObjectId.toString(head.objectId)
    ret.abbreviatedId = head.objectId.abbreviate(8).name()
    
    return ret
}

def gitVersion() {
    def info = gitInfo(rootProject.file('.'))
    def branch = info.branch
    if (branch != null && branch.startsWith('pulls/'))
        branch = 'pr' + branch.rsplit('/', 1)[1]
    if (branch in [null, 'master', 'HEAD', '2.0'])
        return "${info.tag}.${info.offset}".toString()
    return "${info.tag}.${info.offset}-${branch}".toString()
}

version = gitVersion()
println('Installer Version: ' + version)

ext {
    SPEC_VERSION = gitInfo(rootProject.file('.')).tag
    MAIN_CLASS = 'net.minecraftforge.installer.SimpleInstaller'
    MANIFEST = manifest{
        attributes('Main-Class': MAIN_CLASS)
        attributes([
            'Specification-Title':      'Installer',
            'Specification-Vendor':     'Forge Development LLC',
            'Specification-Version':    SPEC_VERSION,
            'Implementation-Title':     'SimpleInstaller',
            'Implementation-Version':   project.version,
            'Implementation-Vendor':    'Forge Development LLC'
        ] as LinkedHashMap, 'net/minecraftforge/installer/')
    }
}

dependencies {
    implementation 'net.sf.jopt-simple:jopt-simple:5.0.4'
    implementation 'com.google.code.gson:gson:2.8.7'
}

compileJava {
    options.encoding = 'UTF-8'
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
    manifest.from(MANIFEST)
}

shadowJar {
    classifier 'fatjar'
    manifest.from(MANIFEST)
}

task pgShrinkJar(type: proguard.gradle.ProGuardTask, dependsOn: shadowJar) {
    ext {
        inputJar = shadowJar.archiveFile.get().asFile
        outDir = file("${buildDir}/proguard")
        obfuscatedJar = "${outDir}/${jar.archiveBaseName}.jar"
        config = 'proguard.pro'
    }
    inputs.file inputJar
    inputs.file config
    
    outDir.mkdirs()

    injars inputJar
    outjars obfuscatedJar
    libraryjars configurations.compile

    // Automatically handle the Java version of this build.
    if (System.getProperty('java.version').startsWith('1.')) {
        // Before Java 9, the runtime classes were packaged in a single jar file.
        libraryjars "${System.getProperty('java.home')}/lib/rt.jar"
    } else {
        // As of Java 9, the runtime classes are packaged in modular jmod files.
        libraryjars "${System.getProperty('java.home')}/jmods/java.base.jmod", jarfilter: '!**.jar', filter: '!module-info.class'
        libraryjars "${System.getProperty('java.home')}/jmods/java.desktop.jmod", jarfilter: '!**.jar', filter: '!module-info.class'
        libraryjars "${System.getProperty('java.home')}/jmods/java.logging.jmod", jarfilter: '!**.jar', filter: '!module-info.class'
        libraryjars "${System.getProperty('java.home')}/jmods/jdk.unsupported.jmod", jarfilter: '!**.jar', filter: '!module-info.class'
    }
    configuration config
}

task shrinkJar(type: Jar, dependsOn: pgShrinkJar) {
    classifier = 'shrunk'
    from zipTree(pgShrinkJar.obfuscatedJar)
    manifest.from(MANIFEST)
}

artifacts {
    //archives shadowJar
    archives sourcesJar
    archives shrinkJar
}

jar {
    manifest.from(MANIFEST)
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact sourcesJar
            artifact shrinkJar
            artifact jar
            pom {
                name = project.archivesBaseName
                packaging = 'jar'
                description = 'Minecraft Forge Installer'
                url = 'https://github.com/MinecraftForge/Installer'

                scm {
                    url = 'https://github.com/MinecraftForge/Installer'
                    connection = 'scm:git:git://github.com/MinecraftForge/Installer.git'
                    developerConnection = 'scm:git:git@github.com:MinecraftForge/Installer.git'
                }

                issueManagement {
                    system = 'github'
                    url = 'https://github.com/MinecraftForge/Installer/issues'
                }

                developers {
                    developer {
                        id = 'cpw'
                        name = 'cpw'
                    }
                    developer {
                        id = 'LexManos'
                        name = 'Lex Manos'
                    }
                }
            }
        }
    }
    repositories {
        maven {
            if (System.env.MAVEN_USER) {
                url 'https://maven.minecraftforge.net/'
                authentication {
                    basic(BasicAuthentication)
                }
                credentials {
                    username = System.env.MAVEN_USER ?: 'not'
                    password = System.env.MAVEN_PASSWORD ?: 'set'
                }
            } else {
                url 'file://' + rootProject.file('repo').getAbsolutePath()
            }
        }
    }
}
